# Generated by Django 3.0.7 on 2021-04-19 18:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('address', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('zipcode', models.CharField(max_length=10)),
                ('phone_number', models.CharField(default='0000000000', max_length=50)),
                ('is_renter', models.BooleanField(default=False)),
                ('is_employee', models.BooleanField(default=False)),
                ('is_park_attendant', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=200)),
                ('Comments_Or_Questions', models.CharField(max_length=500)),
                ('Email', models.EmailField(max_length=200)),
                ('Phone_Number', models.CharField(max_length=20)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Park',
            fields=[
                ('Park_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Park_Name', models.CharField(default=' ', max_length=200)),
                ('City', models.CharField(max_length=50)),
                ('State', models.CharField(max_length=50)),
                ('Zipcode', models.CharField(max_length=10)),
                ('Attendant_Email', models.EmailField(max_length=254)),
                ('Phone', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'park',
                'verbose_name_plural': 'parks',
                'ordering': ('Park_Id',),
            },
        ),
        migrations.CreateModel(
            name='Properties',
            fields=[
                ('Property_id', models.AutoField(primary_key=True, serialize=False)),
                ('Property_Name', models.CharField(default=' ', max_length=50)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('image', models.ImageField(blank=True, upload_to='properties/%Y/%m/%d')),
                ('Type', models.CharField(choices=[('Atheletic_Field', 'Atheletic Field'), ('Pavilion', 'Pavilion'), ('Others', 'Others')], max_length=100)),
                ('Guest_capacity', models.CharField(max_length=50)),
                ('Location', models.CharField(max_length=100)),
                ('Available', models.BooleanField(default=True)),
                ('Amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('Park_Id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='website.Park')),
            ],
            options={
                'verbose_name': 'properties',
                'verbose_name_plural': 'properties',
                'ordering': ('Property_id',),
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('price', models.IntegerField(default=0)),
                ('Res_ID', models.TextField(primary_key=True, serialize=False)),
                ('Event_Date', models.DateField()),
                ('Slot', models.CharField(choices=[('7AM-9AM', '7am-9am'), ('10AM-12PM', '10am-12pm'), ('3PM-5PM', '3pm-5pm'), ('5PM-7PM', '5pm-7pm'), ('7PM-9PM', '7pm-9pm')], max_length=50)),
                ('Team_Size', models.CharField(max_length=50)),
                ('Park_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.Park')),
                ('Property_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.Properties')),
                ('User', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('trn_ID', models.AutoField(primary_key=True, serialize=False)),
                ('Event_Date', models.DateField()),
                ('Slot', models.CharField(choices=[('7AM-9AM', '7am-9am'), ('10AM-12PM', '10am-12pm'), ('3PM-5PM', '3pm-5pm'), ('5PM-7PM', '5pm-7pm'), ('7PM-9PM', '7pm-9pm')], max_length=50)),
                ('Team_Size', models.CharField(max_length=50)),
                ('paid_date', models.DateTimeField(auto_now=True)),
                ('updated', models.DateField(auto_now=True)),
                ('paid', models.BooleanField(default=False)),
                ('Property_ID', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='website.Properties')),
                ('Reservation_ID', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='website.Reservation')),
                ('User', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-paid_date',),
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('penalty_amount', models.CharField(max_length=30)),
                ('uploaded_picture', models.ImageField(blank=True, upload_to='review/%Y/%m/%d')),
                ('status', models.CharField(choices=[('Ready', 'Ready'), ('Not Ready', 'Not Ready')], max_length=100)),
                ('Property_ID', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='website.Properties')),
                ('renter', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('renter',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title', max_length=50, verbose_name='Title')),
                ('day', models.DateField(help_text='Day of the event', verbose_name='Day of the event')),
                ('start_time', models.TimeField(help_text='Starting time', verbose_name='Starting time')),
                ('end_time', models.TimeField(help_text='Final time', verbose_name='Final time')),
                ('notes', models.TextField(blank=True, help_text='Textual Notes', null=True, verbose_name='Textual Notes')),
                ('Property_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.Properties')),
            ],
            options={
                'verbose_name': 'Scheduling',
                'verbose_name_plural': 'Scheduling',
            },
        ),
    ]
